import sqlite3
import getpass
import os
import re


TEST_OUT={}

# Could have used sqlite3.Row, but simpler is better, in this case. The main script works with dict types.
def dict_factory(cur, row):
    return {col[0]: row[ix] for ix, col in enumerate(cur.description)}
# End dict_factory


# This is a subclass of sqlite3.Cursor that includes rudimentary __enter__, __exit__ 
# methods so it can be used in with context manager statements
class CMCursor(sqlite3.Cursor):
    def __enter__(self):
        return self
    
    def __exit__(self, e_type, e_value, e_tb):
        self.close()
# End class CMCursor


# This is a subclass of the sqlite3.Connection class. It does nothing but force
# dict_factory as the row factory and the CMCursor as the cursor factory
class CMConnection(sqlite3.Connection):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.row_factory = dict_factory
    
    def cursor(self, *args, **kwargs):
        return super().cursor(factory=CMCursor)
# End class CMConnection


# For testing purposes, set the base dir to the working dir
def get_base_dir(config_file_path):
    return os.path.dirname(config_file_path)
# End get_base_dir


def get_positional_variable_marker():
    return '?'
# End get_positional_variable_marker


# sqlite3 has no concept of a schema, so we return empty string here.
def get_migration_table_schema():
    return ''
# End get_migration_table_schema


# sqlite3 has no concept of credentials, so we set some useful stuff here.
def get_db_credentials(config):
    return {'user': getpass.getuser(), 'file': os.path.join(config['base_dir'], 'test_db.sqlite')}
# End get_db_credentials


# And here we make the connection and return the connection instance
def get_db_connection(config, credentials):
    conn = sqlite3.connect(credentials['file'], factory=CMConnection)
    return conn
# End get_db_connection

def post_statement(config, migration, statement, cursor):
    TEST_OUT['rowcount'] = cursor.rowcount

    return None


